'''
Extract the single byte count of the section hex dump file
'''
import ConfigParser
import csv
import multiprocessing
import os
import smtplib
import string
import sys
import twilio


Config = ConfigParser.ConfigParser()
Config.read("/home/amber/Malware/config")
path_label = Config.get("Train","label") #Path to the training label
path_hex = Config.get("Train","hex") #Path to the section hex dump data
path_out = Config.get("Train","feature_save") #Path for saving extracted single byte count feature


#Helpter function: load all hex dump files in the directory
def load(filepath):
    asm = []
    for item in os.listdir(filepath):
        asm.append(item)
    return asm

#Helper function: count single byte in the section hex dump
def dictadd(dictionary,key):
    if key != "":
        if key in dictionary:
            dictionary[key] += 1
        else:
            dictionary[key] = 1

#Do the single byte count
def extract(file_tuple):
	#Header: 256 possible bytes
	filename = file_tuple[0]
	file_idx = file_tuple[1]
	hex_pool = ["Filename","Num_sect"]
	hex_char = ["1","2","3","4","5","6","7","8","9","0","a","b","c","d","e","f"]
	i = 0
	for i in range(len(hex_char)):
		j = 0
		for j in range(len(hex_char)):
			token = str(hex_char[i]+hex_char[j])
			hex_pool.append(token)
			j += 1
		i += 1
	hex_dict = {}
	hex_dict["Filename"] = filename


	#Main function: count number of bytes in the hex dump file for each of the 256 bytes
	path = os.path.join(path_hex,filename)
	sec_count = 0
	for sec in os.listdir(path):
		sec_count+= 1
		with open(os.path.join(path,sec), "rb") as fp:
			for line in fp:
				
				hex_token = line.split(" ")
				#print(hex_token)
				for item in hex_token:

					if(not item):
						pass
					else:
						dictadd(hex_dict,item.strip())
	hex_dict["Num_sect"] = sec_count

	with open(os.path.join(path_out,"hex_count.csv"),'ab') as hexfile:
		print("Extracting hex count of hexdump file: "+filename+" "+str(file_idx))
		w = csv.DictWriter(hexfile,hex_pool)
		w.writerow(hex_dict)



def mp_handler(worker,data):
    p = multiprocessing.Pool(40)
    p.map(worker, data)
  


if __name__ == '__main__':
	hex_pool = ["Filename","Num_sect"]
	hex_char = ["1","2","3","4","5","6","7","8","9","0","a","b","c","d","e","f"]
	i = 0
	for i in range(len(hex_char)):
		j = 0
		for j in range(len(hex_char)):
			token = str(hex_char[i]+hex_char[j])
			hex_pool.append(token)
			j += 1
		i += 1
	files = []
	
	with open(label) as f:
		count =0
		for line in f:
			count+=1
			file_tuple = []
			file_tuple.append(str(line.split(".")[0]))
			file_tuple.append(count)
			files.append(file_tuple)
	
	with open(os.path.join(path_out,"hex_count.csv"),'wb+') as f:
		w = csv.DictWriter(f,hex_pool)
		w.writeheader()

	mp_handler(extract,files)



