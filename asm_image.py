'''
Read .asm assembly source code in binary mode and output the first 800 bytes pixel density
'''

import numpy
import os
from array import array
import csv
import ConfigParser

#Loading configuration file, getting directory
Config = ConfigParser.ConfigParser()
Config.read("/home/amber/Malware/config")
path_label = Config.get("Train","label") #Path to the training label
path_data = Config.get("Train","asm") #Path to the assembly source code data
path_save = Config.get("Train","feature_save") #Path for saving extracted asm image feature


#Loading labels: output file will be in the same order as the labels
name = []
with open(path_label) as f:
	for line in f:
		temp = line.split(".")[0]
		name.append(temp)


with open(os.path.join(path_save,"image.csv"),"wb+") as f:
	header = list(range(800))
	w = csv.writer(f)
	w.writerow(header)



pixel = []
filecount = 0
for filename in name:
	filecount+=1
	print(filecount)
	open_name = filename+".asm"
	f = open(os.path.join(path_data,open_name),'rb') #Read the .asm in binary mode
	ln = os.path.getsize(os.path.join(path_data,open_name))
	width = 256
	rem = ln%width
	a = array('B')
	a = numpy.fromfile(f,'B',ln-rem)
	f.close()
	g = numpy.uint8(a)
	g_len = int(len(g))

	counter = 0
	temp_pixel = [0]*800 #Get the first 800 bytes in the image bytes list
	for counter in range(800):
		try:
			temp_pixel[counter] = g[counter]
		except:
			pass
		counter+=1

	with open(os.path.join(path_save,"image.csv"),"ab+") as f:
		print("Extracting asm image pixel values: "+filename)
		w = csv.writer(f)
		w.writerow(temp_pixel)
