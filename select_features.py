'''
Select features with top importances

'''
from sklearn import cross_validation
from sklearn.cross_validation import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix
import ConfigParser
import cPickle
import csv
import numpy as np
import os
import sys


Config = ConfigParser.ConfigParser()
Config.read("/home/amber/Malware/config")
path_save = Config.get("Train","md")

len_set = 0


def select_features(feature_file,model,thres):
    with open(model,"rb") as fid:
        rf_loaded = cPickle.load(fid)
        importances = rf_loaded.feature_importances_
        indices = np.argsort(importances)[::-1]
        total_feature = rf_loaded.n_features_
        print("Total features: "+str(total_feature))

    select_features_idx = []
    select_feature = []
  
    for f in range(len(indices)):

        if(importances[indices[f]] >thres):
            select_features_idx.append(indices[f])

    select_feature = [feature_file[x] for x in select_features_idx]
        
    return select_feature




selected_import = []
#0.007
with open("/data/trend/features/organized_import") as f:
    reader = csv.reader(f,delimiter="\t")
    for data in reader:
        data[-1] = data[-1].strip()
        selected_import = select_features(data,"/data/trend/md/rf_import.pkl",0.007)
        len_set+= len(selected_import)
        break

    print(str(len(selected_import))+" import features selected")

    


selected_info = []
#0.03
with open("/data/trend/features/organized_info.csv") as f:
    reader = csv.reader(f,delimiter=",")
    for data in reader:
        data[-1] = data[-1].strip()
        selected_info = select_features(data,"/data/trend/md/rf_info.pkl",0.03)
        len_set+= len(selected_info)
        break

    print(str(len(selected_info))+" info features selected")




selected_memory = []
#0.008
with open("/data/trend/features/memory_count.csv") as f:
    reader = csv.reader(f,delimiter=",")
    for data in reader:
        data[-1] = data[-1].strip()
        selected_memory = select_features(data,"/data/trend/md/rf_Mem.pkl",0.008)
        len_set+= len(selected_memory)
        break

    print(str(len(selected_memory))+" memory features selected")



selected_section = []
##0.01
with open("/data/trend/features/organized_section") as f:
    reader = csv.reader(f,delimiter="\t")
    for data in reader:
        data[-1] = data[-1].strip()
        selected_section = select_features(data,"/data/trend/md/rf_section.pkl",0.01)
        len_set+= len(selected_section)
        break

    print(str(len(selected_section))+" section features selected")



selected_image = []
#0.01
with open("/data/trend/features/asm_image.csv") as f:
    reader = csv.reader(f,delimiter=",")
    for data in reader:
        data[-1] = data[-1].strip()
        selected_image = select_features(data,"/data/trend/md/rf_image.pkl",0.01)
        len_set+= len(selected_image)
        break

    print(str(len(selected_image))+"image features selected")


selected_image = []
#0.01
with open("/data/trend/features/asm_image.csv") as f:
    reader = csv.reader(f,delimiter=",")
    for data in reader:
        data[-1] = data[-1].strip()
        selected_image = select_features(data,"/data/trend/md/rf_image.pkl",0.01)
        len_set+= len(selected_image)
        break

    print(str(len(selected_image))+"image features selected")

selected_opcode = []
0.001
with open("/data/trend/features/nGram_all.csv") as f:
    reader = csv.reader(f,delimiter=",")
    for data in reader:
        data[-1] = data[-1].strip()
        selected_opcode = select_features(data,"/data/trend/md/rf.pkl",0.000)
        len_set+= len(selected_opcode)
        break
    print(str(len(selected_opcode))+"opcode features selected")

with open(os.path.join(path_save,"selected_opcode.csv"),"wb+") as f:
    w = csv.writer(f)
    w.writerow(selected_opcode)


selected_opcode = []
#0.001
with open("/data/trend/features/organized_hex.csv") as f:
    reader = csv.reader(f,delimiter=",")
    for data in reader:
        data[-1] = data[-1].strip()
        selected_opcode = select_features(data,"/data/trend/md/rf_hex.pkl",0.003)
        len_set+= len(selected_opcode)
        break
    print(str(len(selected_opcode))+"hex features selected")

with open(os.path.join(path_save,"selected_hex.csv"),"wb+") as f:
    w = csv.writer(f)
    w.writerow(selected_opcode)


#0.045
with open("/data/trend/features/asm_image_stat.csv") as f:
    reader = csv.reader(f,delimiter=",")
    for data in reader:
        data[-1] = data[-1].strip()
        selected_opcode = select_features(data,"/data/trend/md/rf_asm_image_stat.pkl",0.045)
        len_set+= len(selected_opcode)
        break
    print(str(len(selected_opcode))+"image stat features selected")

with open(os.path.join(path_save,"selected_image_stat.csv"),"wb+") as f:
    w = csv.writer(f)
    w.writerow(selected_opcode)

with open(os.path.join(path_save,"selected_import.csv"),"wb+") as f:
    w = csv.writer(f)
    w.writerow(selected_import)


with open(os.path.join(path_save,"selected_info.csv"),"wb+") as f:
    w = csv.writer(f)
    w.writerow(selected_info)


with open(os.path.join(path_save,"selected_memory.csv"),"wb+") as f:
    w = csv.writer(f)
    w.writerow(selected_memory)

with open(os.path.join(path_save,"selected_section.csv"),"wb+") as f:
    w = csv.writer(f)
    w.writerow(selected_section)



with open(os.path.join(path_save,"selected_image.csv"),"wb+") as f:
    w = csv.writer(f)
    w.writerow(selected_image)