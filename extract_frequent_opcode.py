'''
Scan the raw one-gram opcode sequence and extract the frequence 2-5 opcode patterns
*An opcode patterns is frequent if it appears 100 times or more in a single .asm source code file
'''

import ConfigParser
import csv
import datetime
import multiprocessing
import numpy as np
import os
import re
import string
import sys


Config = ConfigParser.ConfigParser()
Config.read("/home/amber/Malware/config")
path_raw = Config.get("Train","feature_save") #Path to the raw one-gram opcode file
path_out = Config.get("Train","feature_save") #Path for saving extracted frequent opcode count featuers


#Helper Function: count opcode patterns
def dictadd(dictionary,key):
    if key != "":
        if key in dictionary:
            dictionary[key] += 1
        else:
            dictionary[key] = 1
'''
Extract the nGram frequent opcode patterns
Param:
	Raw: path to n gram opcode sequences
	freq: threshold for determining if an opcode pattern is frequent
'''
def top_gram(raw,freq):
	#Getting attribute pool
	attribute_pool = set()
	dict_pool = []
	out_name = str(raw.split("_")[0])+"_"+str(raw.split("_")[1])+"_count.csv"
	with open(os.path.join(path_raw,raw)) as f:

		reader = csv.reader(f,delimiter=",")
		file_counter = 0
		for program in reader:
			opcode_dict = {}
			file_counter+=1
			
			for opcode in program[1:]:
				dictadd(opcode_dict,opcode.strip())

			opcode_dict = dict((key, value) for key, value in opcode_dict.items() if value > freq)
			
			key = list(opcode_dict.keys())
			for item in key:
				attribute_pool.add(item)
			dict_pool.append(opcode_dict)
			if(file_counter%100==0):
				print("Total "+raw+" attribute "+str(len(attribute_pool))+" "+str(file_counter))

	
	write_count = 0
	with open(os.path.join(path_out,out_name),'wb+') as f2:
		w = csv.DictWriter(f2,attribute_pool)
		w.writeheader()
		print("Total "+raw+" attribute "+str(len(attribute_pool)))
		for d in dict_pool:
			write_count+=1
			w.writerow(d)
			if(write_count%1000 == 0):
				print("Writing "+str(out_name)+" "+str(write_count))
		
	

def main():
	thread1 = multiprocessing.Process(target=top_gram, args=("one_gram_raw.csv",100,))
	thread2 = multiprocessing.Process(target=top_gram, args=("two_gram_raw.csv",100,))
	thread3 = multiprocessing.Process(target=top_gram,args=("three_gram_raw.csv",100))
	thread4 = multiprocessing.Process(target=top_gram,args=("four_gram_raw.csv",100))
	#thread5 = multiprocessing.Process(target=top_gram, args=("five_gram_raw.csv",100))
	thread1.start()
	thread2.start()
	thread3.start()
	thread4.start()
	#thread5.start()
	

if __name__ == '__main__':
	main()