'''
Scan csv files output from asmScan.py to produce the following information:
    1) Raw n_gram opcode seqeunce (2-5 gram)
    2) n_gram opcode_line
Output file
    1) csv file: [Filename, raw_2gram]
    2) csv file: [Filename, raw_3gram]
    3) csv file: [Filename, raw_4gram]
    4) csv file: [Filename, raw_5gram]
    5) csv file: [Filename, raw_2gram_lines]

'''
import ConfigParser
import csv
import datetime
import numpy as np
import os
import sys
import thread
import threading

#Helper Function: write log
def writelog(message):
    with open(os.path.join(path_out,"log.csv"), "ab") as fp:
        wr = csv.writer(fp)
        wr.writerow([message])


filedone = []
try:
    with open(os.path.join(path_out,"filedone_nGram.csv")) as f:
        for line in f:
            filedone.append(line.strip())
except:
    pass


Config = ConfigParser.ConfigParser()
Config.read("/home/amber/Malware/config")
path_feature = Config.get("Train","feature_save") #Path to the section hex dump data
path_out = Config.get("Train","feature_save") #Path for saving extracted single byte count feature
raw = os.path.join(path_feature,"one_gram_raw.csv")
lines = os.path.join(path_feature,"one_gram_line.csv")


time = datetime.datetime.now()
print("---------------Extracting raw nGrams opcodes---------------------")
print(time)
with open(os.path.join(path_out,"log.csv"), "ab") as fp:
    wr = csv.writer(fp)
    wr.writerow([(str(time))])
    wr.writerow(["---------------Extracting raw nGrams opcodes---------------------"])
    
#Readfiles
print("Reading raw opcode")
opcode = np.loadtxt(raw,dtype=object)
all_files = len(opcode)


#Extract 2_gram opcode
def two():
    
    file_idx = 0
    for file_idx in range(all_files):
        name = opcode[file_idx].split(",")[0]
        if(name in filedone):
            print("Done scanning asm file: "+str(file_idx)+" "+name)
        else:
            print("Extracting 2-gram opcode: "+str(file_idx+1)+" "+name)
            writelog(("Extracting 2-gram opcode: "+str(file_idx+1)+" "+name))

            two_gram = []
            one_gram = opcode[file_idx].split(",")[2:]
            one_gram_line = opcode_line[file_idx].split(",")[2:]
        
            to_write_opcode = []
            to_write_line = []
            
            to_write_opcode.append(name)
            to_write_line.append(name)
            counter = 0;
            
            try:
                for counter in range(len(one_gram)-1):
                    two_gram_op = one_gram[counter].strip()+"_"+one_gram[counter+1].strip()
                    to_write_opcode.append(two_gram_op)
                    
                    counter +=1

                with open(os.path.join(path_out,"two_gram_raw.csv"), "ab") as fp:
                    wr = csv.writer(fp)
                    wr.writerow(to_write_opcode)

                with open(os.path.join(path_out,"two_gram_line.csv"), "ab") as fp:
                    wr = csv.writer(fp)
                    wr.writerow(to_write_line)

            except:
                writelog(("Error extracting 2-gram opcode: "+str(file_idx+1)+" "+name))

            file_idx += 1


#Extract 3_gram opcode
def three():
 
    file_idx = 0
    for file_idx in range(all_files):
        name = opcode[file_idx].split(",")[0]
        if(name in filedone):
            print("Done scanning asm file: "+str(file_idx)+" "+name)
        else:
            print("Extracting 3-gram opcode: "+str(file_idx+1)+" "+name)
            writelog(("Extracting 3-gram opcode: "+str(file_idx+1)+" "+name))
            three_gram = []
            one_gram = opcode[file_idx].split(",")[2:]
            one_gram_line = opcode_line[file_idx].split(",")[2:]
           
            to_write_opcode = []
            to_write_line = []

            to_write_opcode.append(name)
            to_write_line.append(name)


            counter = 0;

            try:
                for counter in range(len(one_gram)-2):
                    three_gram_op = one_gram[counter].strip()+"_"+one_gram[counter+1].strip()+"_"+one_gram[counter+2].strip()
                    to_write_opcode.append(three_gram_op)
                
                    counter +=1

                with open(os.path.join(path_out,"three_gram_raw.csv"), "ab") as fp:
                    wr = csv.writer(fp)
                    wr.writerow(to_write_opcode)

                with open(os.path.join(path_out,"three_gram_line.csv"), "ab") as fp:
                    wr = csv.writer(fp)
                    wr.writerow(to_write_line)

            except:
                writelog(("Error Extracting 3-gram opcode: "+str(file_idx+1)+" "+name))

            file_idx += 1
        


#Extract 4_gram opcode
def four():
    
    file_idx = 0
    for file_idx in range(all_files):
        name = opcode[file_idx].split(",")[0]
        if(name in filedone):
            print("Done scanning asm file: "+str(file_idx)+" "+name)
        else:
            print("Extracting 4-gram opcode: "+str(file_idx+1)+" "+name)
            writelog(("Extracting 4-gram opcode: "+str(file_idx+1)+" "+name))
            four_gram = []
            one_gram = opcode[file_idx].split(",")[2:]
            one_gram_line = opcode_line[file_idx].split(",")[2:]
           
            to_write_opcode = []
            to_write_line = []

            to_write_opcode.append(name)
            to_write_line.append(name)


            counter = 0;

            try:
                for counter in range(len(one_gram)-3):
                    s = "_";
                    seq = (one_gram[counter].strip(), one_gram[counter+1].strip(), one_gram[counter+2].strip(),one_gram[counter+3].strip())
                    four_gram_op = s.join( seq )
                    to_write_opcode.append(four_gram_op)

                    counter +=1

                with open(os.path.join(path_out,"four_gram_raw.csv"), "ab") as fp:
                    wr = csv.writer(fp)
                    wr.writerow(to_write_opcode)

                with open(os.path.join(path_out,"four_gram_line.csv"), "ab") as fp:
                    wr = csv.writer(fp)
                    wr.writerow(to_write_line)

            except:
                writelog(("Error Extracting 4-gram opcode: "+str(file_idx+1)+" "+name))

            file_idx += 1


def main():
    thread1 = threading.Thread(target=two, )
    
    thread2 = threading.Thread(target=three, )
    
    thread3 = threading.Thread(target=four, )
    
    #thread4 = threading.Thread(target=five, )
    thread1.start()
    thread2.start()
    thread3.start()
    #thread4.start()
    print("Done")


if __name__ == '__main__':
    main()


       

