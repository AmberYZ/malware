'''
Select opcode count patterns with top importances
'''

from sklearn import cross_validation
from sklearn.cross_validation import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix
import ConfigParser
import cPickle
import csv
import numpy as np
import os
import sys
import threading

Config = ConfigParser.ConfigParser()
Config.read("/home/amber/Malware/config")
path_model = Config.get("Train","md") 
path_opcode = Config.get("Train","feature_save") 


def select_features(ngram,n):
    print("selecting " + ngram+" opcode features")
    feature_file = ngram+"_gram_count.csv"
    all_feature = []
    with open(os.path.join(path_opcode,feature_file)) as f:
        reader = csv.reader(f,delimiter=",")
        for data in reader:
            data[-1] = data[-1].strip()
            all_feature = data
            break
            
  
    model = ngram+"_gram_rf.pkl"
    with open(os.path.join(path_model,model),"rb") as fid:
        rf_loaded = cPickle.load(fid)
        importances = rf_loaded.feature_importances_
        indices = np.argsort(importances)[::-1]
        total_feature = rf_loaded.n_features_
        #print("Total features: "+str(total_feature))
    select_features_idx = []
    select_feature = []
    sorted_idx = sorted(range(len(importances)), key=lambda k: importances[k])
    select_features_idx = sorted_idx[-n:]

    selected_feature = [all_feature[x] for x in select_features_idx]

    # for item in select_features_idx:
    #     print(importances[item])

    #print(selected_feature)

  
    name_save = ngram+"_gram_selected.csv"
    with open(os.path.join(path_model,name_save),"wb+") as f:
        w = csv.writer(f)
        w.writerow(selected_feature)


def main():
    #select_features("one",200)

    select_features("two",30)

    select_features("three",30)

    select_features("four",30)
    #select_features("five",50)

    # one = threading.thread(target=select_features,args=("one",300))
    # two = threading.thread(target=select_features,args=("two",300))
    # three = threading.thread(target=select_features,args=("three",300))
    # four = threading.thread(target=select_features,args=("four",300))
    #five = threading.thread(target=select_features,args=("five",300))

    # one.start()
    # two.start()
    # three.start()
    # four.start()
    #five.start()



if __name__ == '__main__':
    main()
