'''
Input Command line argument: 
    Filepath to the csv file
    1) argv[1] = filepath to n_gram_raw, n_gram_line, loop range
Input paramenter:
    1) loop multiplier: int
    2) Frequency threshold: int
    
Scan csv files output from asmScan.py to produce the following information:
    1) n_gram opcode (>frequency threshold) count 
    2) 
Output file
    1) csv file: [Filename, n_gram count]

'''
import ConfigParser
import sys
import os
import re
import string
import datetime
import csv
import numpy as np


#Helper Function: write logs
def writelog(message):
    with open(os.path.join(path_out,"log.csv"), "ab") as fp:
        wr = csv.writer(fp)
        wr.writerow([message])


path = Config.get("Train","feature_save")
path_out = Config.get("Train","feature_save")


time = datetime.datetime.now()
print("---------------Aggregating opcode counts---------------------")
print(time)
multiplier = 15
freq = 100

writelog("---------------Aggregating opcode counts---------------------")
writelog(time)

#Helpter function: update dictionary [opcode, count]
def dictadd(dictionary,key,multiplier):
    if key != "":
        if key in dictionary:
            dictionary[key] += 1*multiplier
        else:
            dictionary[key] = 1*multiplier

raw = os.path.join(path,"one_gram_raw.csv")
lines = os.path.join(path,"one_gram_line.csv")
loop = os.path.join(path,"loop_range.csv")

def extract(opcode, multiplier):
    opcode = opcode.split(",")
    name = opcode[0]
    opcode = opcode[2:]
    rt = []
    opcode_list = [{}for i in range(5)]
    #Process all raw opcodes
    gram = 0

    for item in opcode_list:
        op_idx = 0
        for op_idx in range(len(opcode)-gram):
            s = "_"
            op = opcode[op_idx:(op_idx+gram+1)]
            n_gram_op = s.join( op ) 
            dictadd(item,n_gram_op,1)
            op_idx += 1      
        gram += 1
    rt.append(name)
    rt.extend(opcode_list)
    return rt

attribute_pool = []
dict_pool = []
with open(raw) as opcode_pool: 
    file_idx = 0
    for opcode in opcode_pool:
        file_idx+=1
        z = {}
        print("Getting attribute pool: "+str(file_idx)+" "+opcode.split(",")[0])
   
        #Run Feature extraction
        result = extract(opcode,multiplier)
        #Extracting one-gram feature
        one_gram = result[1]
        one_gram_op_freq = dict((key, value) for key, value in one_gram.items() if value > freq)
        attribute_pool.extend(one_gram_op_freq)
        attribute_pool = list(set(attribute_pool))
       

        #Extracting 2-gram opcode
        two_gram = result[2]
        two_gram_freq = dict((key, value) for key, value in two_gram.items() if value > freq)
        attribute_pool.extend(two_gram_freq)
        attribute_pool = list(set(attribute_pool))
        z = one_gram_op_freq.copy()
        z.update(two_gram_freq) 

        #Extracting 3-gram opcode
        three_gram = result[3]
        three_gram_freq = dict((key, value) for key, value in three_gram.items() if value > freq)
        attribute_pool.extend(three_gram_freq)
        attribute_pool = list(set(attribute_pool))
        z.update(three_gram_freq)

        #Extracting 4-gram opcode
        four_gram = result[4]
        four_gram_freq = dict((key, value) for key, value in four_gram.items() if value > freq)
        attribute_pool.extend(four_gram_freq)
        attribute_pool = list(set(attribute_pool))
        z.update(four_gram_freq)

        #Extracting 5-gram opcode
        five_gram = result[5]
        five_gram_freq = dict((key, value) for key, value in five_gram.items() if value > freq)
        attribute_pool.extend(five_gram_freq)
        attribute_pool = list(set(attribute_pool))
        z.update(five_gram_freq)
        dict_pool.append(z)

        


with open(os.path.join(path_out,"nGram.csv"), 'ab') as f:
    w = csv.DictWriter(f,attribute_pool)
    w.writeheader()
with open(raw) as opcode_pool: 
    file_idx = 0

    
    for opcode in opcode_pool:
        file_idx+=1
        z = {}
        print("Extracting n_gram opcodes from file: "+str(file_idx)+" "+opcode.split(",")[0])
   
        #Run Feature extraction
        to_add = []
        result = extract(opcode,multiplier)
        one_gram = result[1]
        one_gram_op_freq = dict((key, value) for key, value in one_gram.items() if value > freq)
 
        #Extracting 2-gram opcode
        two_gram = result[2]
        two_gram_freq = dict((key, value) for key, value in two_gram.items() if value > freq)
        z = one_gram_op_freq.copy()
        z.update(two_gram_freq) 
        #Extracting 3-gram opcode
        three_gram = result[3]
        three_gram_freq = dict((key, value) for key, value in three_gram.items() if value > freq)
        z.update(three_gram_freq)

        #Extracting 4-gram opcode
        four_gram = result[4]
        four_gram_freq = dict((key, value) for key, value in four_gram.items() if value > freq)
 
        z.update(four_gram_freq)

        #Extracting 5-gram opcode
        five_gram = result[5]
        five_gram_freq = dict((key, value) for key, value in five_gram.items() if value > freq)
     
        z.update(five_gram_freq)

        to_add.append(z)

        with open(os.path.join(path_out,"nGram.csv"), 'ab') as f:
            w = csv.DictWriter(f,attribute_pool)
            w.writerow(z)

