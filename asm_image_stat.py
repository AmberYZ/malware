'''
Read the .asm assembly source code in binary mode, chunk the code file into ten parts, and return
    1) Average pixel density of each part
    2) Standard deviation of pixel density of each part
'''

import numpy 
import os
from array import array
import csv
import ConfigParser

Config = ConfigParser.ConfigParser()
Config.read("/home/amber/Malware/config")
path_label = Config.get("Train","label") #Path to the training label
path_data = Config.get("Train","asm") #Path to the assembly source code data
path_save = Config.get("Train","feature_save") #Path for saving extracted asm image feature


#Loading labels: output file will be in the same order as the labels
name = []
with open(path_label) as f:
    for line in f:
        temp = line.split(".")[0]
        name.append(temp)


with open(os.path.join(path_save,"asm_image_stat.csv"),"wb+") as f:
    header = ["mean_0.0", "std_0.0","mean_0.1", "std_0.1","mean_0.2", "std_0.2","mean_0.3", "std_0.3","mean_0.4", "std_0.4","mean_0.5", "std_0.5","mean_0.6", "std_0.6","mean_0.7", "std_0.7","mean_0.8", "std_0.8","mean_0.9", "std_0.9"]
    w = csv.writer(f)
    w.writerow(header)


filecount = 0
for filename in name:
    filecount+=1
    open_name = filename+".asm"
    f = open(os.path.join(path_data,open_name),'rb') #Read .asm in binary mode
    ln = os.path.getsize(os.path.join(path_data,open_name))
    width = 256
    rem = ln%width
    a = array('B')
    a = numpy.fromfile(f,'B',ln-rem)
    f.close()
    g = numpy.uint8(a)
    
    fold = [0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]
    len_g = len(g)

    stat = []
    for item in fold:
        g_fold = g[int(len_g*item):int(len_g*(item+0.1))]
        mean = numpy.mean(g_fold)
        std = numpy.std(g_fold)
        stat.append(mean)
        stat.append(std)

    with open(os.path.join(path_save,"asm_image_stat.csv"),"ab+") as f:
        print("Writing asm image stat: "+str(filecount))
        w = csv.writer(f)
        w.writerow(stat)



