'''
Extract fields in import file
Return counts of each DDL import functions in a single assembly source code file
'''
import ConfigParser
import csv
import json
import numpy as np
import os
import re
import string
import sys

#Helpter function: update dictionary [opcode, count]
def dictadd(dictionary,key):
    if key != "":
        if key in dictionary:
            dictionary[key] += 1
        else:
            dictionary[key] = 1

#Loading configuration file
Config = ConfigParser.ConfigParser()
Config.read("/home/amber/Malware/config")
rootdir = Config.get("Train","other") #Path to the import data
path_out = Config.get("Train","feature_save") #Path for saving extracted import counts




dict_keys = []
dict_pool = []
z = []
count = 0
for subdir, dirs, files in os.walk(rootdir):
    imports = {}
    idx = ((subdir.rfind("/")))+1
    count +=1
    print(str(subdir[idx:])+str(" ")+str(count))
    imports["Filename"]=subdir[idx:].strip()

    for f in files:
        file = os.path.join(subdir, f)
        if(f=="import"):
            #Process import file

            with open(file,"rb") as im:
                for line in im:
                    line_tokenized = re.split(" |\t",line)
                    ddl = line_tokenized[0].strip()
                    dictadd(imports,ddl)
                dict_keys.extend(imports.keys()) 
                z.append(imports)
        dict_pool = list(set(dict_keys))


with open(os.path.join(path_out,"import_count"),'wb+') as f:
	w = csv.DictWriter(f,dict_pool,delimiter="\t")
	w.writeheader()
	for d in z:
		w.writerow(d)
