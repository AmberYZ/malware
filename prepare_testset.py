'''
Prepare the testing dataset

'''
import ConfigParser
from itertools import izip
import cPickle
import csv
import numpy as np
import os
import re
import string
import sys




path_data = Config.get("Test","feature_save")
path_opcode = Config.get("Test","feature_save")
path_save = Config.get("Test","model")

train_data = []

def find_idx(total, select):
    result = []
    for item in select:
        try:
            result.append(total.index(item))
        except:
            print(item+"not in trainning attributes")
    return result


subset = 30000

#Loading selected features
def load_selected_features(file):
    with open(file) as f:
        for line in f:
            line = line.split(",")
            line[-1] =  line[-1].strip()
            return line
            break


#Loading selected n_Gram opcode data
ngram = ["one","two","three","four"]
gram_count = 0
for gram in ngram:
    gram_count +=1
    import_count = 0
    data_count = 0
    select_features_idx = []

    with open(os.path.join(path_opcode,gram+"_gram_count.csv")) as f:
        for line in f:
            import_count+=1
            data = line.split(",")
            data[-1] = data[-1].strip()  
            data = map(str.strip, data) 
            if(import_count==1):
                #Get selected features for nGram
                selected = load_selected_features("/data/trend/md/"+gram+"_gram_selected.csv")
                select_features_idx = find_idx(data,selected)
            data = [data[x] for x in select_features_idx]
            if(import_count>1):
                data = [int(0) if not x else float(x) for x in data]
                if(gram_count==1):
                    train_data.append(data)
                else:
                    train_data[data_count].extend(data)
                data_count+=1
            sys.stdout.write('\r' + "Loading "+gram+" gram opcode data: "+str(data_count)+' '*20)
            sys.stdout.flush() 

            if(data_count==subset):
                print("\n"+"Loading opcode complete")
                break

import_count = 0
data_count = 0
with open(os.path.join(path_data,"organized_hex.csv")) as f:
    for line in f:
        line = line.strip()
        import_count += 1
        data_import = line.split(",")
        data_import[-1] = data_import[-1].strip()
        if(import_count==1):
            #Get selected features 
            data_import[-1]="ff"
            selected = load_selected_features("/data/trend/md/selected_hex.csv")
            print("Selecting "+str(len(selected))+ " hex features")
            select_features_idx = find_idx(data_import,selected)
        
        if(import_count>2):
            data_import = [data_import[x] for x in select_features_idx]
            data_import = [int(0) if not x else float(x) for x in data_import]
            train_data[data_count].extend(data_import)
            data_count+=1
        sys.stdout.write('\r' + "Loading hex data: "+str(data_count)+' '*20)
        sys.stdout.flush() 

        if(data_count==subset):
            print("\n"+"Loading hex complete")
            break
#Loading memory_count data
import_count = 0
data_count = 0
with open(os.path.join(path_data,"memory.csv")) as f:
    for line in f:
        line = line.strip()
        import_count += 1
        data_import = line.split(",")
        data_import[-1] = data_import[-1].strip()
        if(import_count==1):
            #Get selected features 
            selected = load_selected_features("/data/trend/md/selected_memory.csv")
            print("Selecting "+str(len(selected))+ " memory features")
            select_features_idx = find_idx(data_import,selected)
        data_import = [data_import[x] for x in select_features_idx]
        if(import_count>1):
            data_import = [int(0) if not x else float(x) for x in data_import]
            train_data[data_count].extend(data_import)
            data_count+=1
        sys.stdout.write('\r' + "Loading memory_word data: "+str(data_count)+' '*20)
        sys.stdout.flush() 

        if(data_count==subset):
            print("\n"+"Loading memory complete")
            break



#Loading info data
import_count = 0
data_count = 0
with open(os.path.join(path_data,"organized_info.csv")) as f:
     for line in f:
        data_import = line.split(",")
        if(data_import[0]=='"' and len(data_import)==1):
            pass
        else:
            import_count += 1
        if(import_count==1):
            #Get selected features 
            data_import[-1] = data_import[-1].strip()
            selected = load_selected_features("/data/trend/md/selected_info.csv")
            print("Selecting "+str(len(selected))+ " info features")
            select_features_idx = find_idx(data_import,selected)
        data_import = [data_import[x] for x in select_features_idx]
  
        if(import_count>1):
            if("#DIV/0!" in data_import or "#DIV/0!\n"):
                data_import = [0 if x.strip()=="#DIV/0!" else x for x in data_import]
            try:
                data_import = [int(0) if not x else float(x) for x in data_import]
            except:
                print(data_import)
            train_data[data_count].extend(data_import)
            data_count+=1
            
        sys.stdout.write('\r' + "Loading info data: "+str(data_count)+' '*20)
        sys.stdout.flush() 
        if(data_count==subset):
            print("\n"+"Loading info complete")
            break

#Loading import data
import_count = 0
data_count = 0
with open(os.path.join(path_data,"organized_import")) as f:
    reader = csv.reader(f,delimiter="\t")
    for line in reader:
        import_count+=1
        if(import_count==1):
            #Get selected features 
            selected = load_selected_features("/data/trend/md/selected_import.csv")
            print("Selecting "+str(len(selected))+ " import features")
            select_features_idx = find_idx(line,selected)
        line = [line[x] for x in select_features_idx]
  
        if(import_count>1):
            try:
                line[-1] = line[-1].strip()
                data_import = [int(0) if not x else float(x) for x in line]
            except:
                print(data_import)
                break
            train_data[data_count].extend(data_import)
            data_count+=1
        sys.stdout.write('\r' + "Loading import data: "+str(data_count)+' '*20)
        sys.stdout.flush() 
        if(data_count==subset):
            print("\n"+"Loading info complete")
            break

# #Loading section data
import_count = 0
data_count = 0
with open(os.path.join(path_data,"organized_section")) as f:
    reader = csv.reader(f,delimiter="\t")
    for line in reader:
        import_count+=1
        if(import_count==1):
            #Get selected features 
            selected = load_selected_features("/data/trend/md/selected_section.csv")
            print("Selecting "+str(len(selected))+ " section features")
            select_features_idx = find_idx(line,selected)
        line = [line[x] for x in select_features_idx]
#   
        if(import_count>1):
            data_import = [int(0) if not x else float(x) for x in line]
            train_data[data_count].extend(data_import)
            data_count+=1
        sys.stdout.write('\r'+"Loading section data: "+str(data_count)+' '*20)
        sys.stdout.flush()
        if(data_count==subset):
            print("\n"+"Loading section complete")
            break





#Loading asm image data
import_count = 0
data_count = 0
with open(os.path.join(path_data,"image.csv")) as f:
     for line in f:
        data_import = line.split(",")
        import_count += 1

        if(import_count==1):
            #Get selected features 
            selected = load_selected_features("/data/trend/md/selected_image.csv")
            print("Selecting "+str(len(selected))+ " image features")
            select_features_idx = find_idx(data_import,selected)
        data_import = [data_import[x] for x in select_features_idx]

        if(import_count>1):
            if('nan' in data_import):
                data_import = [0 if x.strip()=='nan' else x for x in data_import]
            data_import[-1] = data_import[-1].strip()
            train_data[data_count].extend(data_import)

            data_count+=1
        sys.stdout.write('\r'+"Loading asm image data: "+str(data_count)+' '*20)
        sys.stdout.flush()
        if(data_count==subset):
            print("\n"+"Loading image complete")
            break

#Loading asm image stat data
import_count = 0
data_count = 0
with open(os.path.join(path_data,"image_stat.csv")) as f:
     for line in f:
        data_import = line.split(",")
        import_count += 1

        if(import_count==1):
            data_import[-1] = data_import[-1].strip()
            #Get selected features 
            selected = load_selected_features("/data/trend/md/selected_image_stat.csv")
            print("Selecting "+str(len(selected))+ " image features")
            select_features_idx = find_idx(data_import,selected)
        data_import = [data_import[x] for x in select_features_idx]

        if(import_count>1):
            if('nan' in data_import):
                data_import = [0 if x.strip()=='nan' else x for x in data_import]
            try:
                data_import[-1] = data_import[-1].strip()
                data_import = map(str.strip, data_import) 
            except:
                pass
            train_data[data_count].extend(data_import)

            data_count+=1
        sys.stdout.write('\r'+"Loading asm image stat data: "+str(data_count)+' '*20)
        sys.stdout.flush()
        if(data_count==subset):
            print("\n"+"Loading image stast complete")
            break


np.savetxt("/data/trend/testing/feature_set_NoImageStat.csv", train_data, delimiter=",", fmt="%s")